#!/usr/bin/env ruby
require 'rubygems'
require 'open-uri'
require 'optparse'
require 'mechanize'
$LOAD_PATH.unshift(File.dirname(__FILE__))
MOCKSERVER_URL = "http://localhost:7000"

module Web
  def get url, params={}
    if params[:body]
      response = Net::HTTP.start("localhost", 7000) do |http|
        request = Net::HTTP::Get.new(url)
        request.body=params[:body]
        http.request(request)
      end

      def response.code
        @code.to_i
      end

    else
      response = using_mechanize do |browser|
        browser.get("#{MOCKSERVER_URL}#{url}", params)
      end

    end

    response
  end

  def post url, params
    using_mechanize do |browser|
      browser.post("#{MOCKSERVER_URL}#{url}",params)
    end
  end

  private
  def using_mechanize
    begin
      browser = Mechanize.new
      browser.keep_alive = false
      response = yield browser

      def response.code
        @code.to_i
      end
    rescue Exception => e
      response = e

      def response.code
        self.response_code.to_i
      end
      def response.body
        ""
      end
    end
    response
  end

end


include Web

def wait_until time=30
  start_time = Time.now
  until Time.now >= start_time + time
    puts "waiting"
    sleep 0.1
    return if yield
  end
  raise 'timeout waiting'
end


if ARGV.include?('start')
  begin
    if open('http://localhost:7000/mockserver/clear')
      puts "Mirage already running"
      exit 1
    end
  rescue
  end


  puts "Starting the Mirage"
  `thin -p 7000 -l thin.log -D -V -d -R #{File.dirname(__FILE__)}/../lib/config.ru start`

  wait_until do
    begin
      get('/mockserver/clear')
    rescue
    end
  end


elsif ARGV.include?('stop')
  puts "Stoping Mirage"
  `thin stop`
  wait_until 45 do
    get('/mockserver/clear').is_a?(Errno::ECONNREFUSED)
  end
#  FileUtils.rm_rf('tmp')

else
  puts "You must choose to: Start or Stop the mirage"
  exit 1

end


#ARGV.each { |arg| puts arg }

#OptionParser.new do |opts|
#  opts.on("-s", "--start") do |log|
#    puts "starting"
#  end
#end.parse!
