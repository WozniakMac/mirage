#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.setup
$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib")
require 'mirage'
require 'open-uri'
require 'optparse'
require 'mechanize'

include Mirage::Util


def mirage_process_id
  mirage_cmdline_files = Dir['/proc/*/cmdline'].find_all { |cmdline_file| File.read(cmdline_file) =~ /Mirage|start_mirage/ }
  mirage_cmdline_files.collect{|mirage_cmdline_file| File.read("#{File.dirname(mirage_cmdline_file)}/stat").split(' ').first.to_i }
end

args = ARGV.clone

options = parse_options(ARGV)


if ARGV.include?('start')
  include Mirage::Util

  mirage = Mirage::Client.new(options)
  if mirage.running?
    puts "Mirage already running"
    exit 1
  end

  args.delete('start')
  system "(cd #{File.dirname(__FILE__)}/../lib/ && ruby start_mirage.rb #{args.join(' ')}) > /dev/null 2>&1 &"
  wait_until do
    mirage.running?
  end

elsif ARGV.include?('stop')


  puts "Stoping Mirage"
  begin
    mirage_process_id.each{|id| Process.kill(9, id)}
  rescue
    puts 'Mirage is not running'
  end
else
  puts "You must choose to: Start or Stop the mirage"
  exit 1

end
