#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.setup
$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib")
require 'mirage'
require 'open-uri'
require 'optparse'
require 'mechanize'

options = {:port => 7001}

args = ARGV.clone
OptionParser.new(ARGV) do |opts|
  opts.on("-p", "--port PORT", "the port to start Mirage on") do |port|
    options[:port] = port
  end
end.parse!


if ARGV.include?('start')
  include Mirage::Util

  mirage = Mirage::Client.new(options)
  if mirage.running?
    puts "Mirage already running"
    exit 1
  end

  args.delete('start')
  system "(cd #{File.dirname(__FILE__)}/../lib/ && ruby start.rb #{args.join(' ')}) > /dev/null 2>&1 &"
  wait_until do
    mirage.running?
  end

elsif ARGV.include?('stop')
  def mirage_process_id
    mirage_cmdline_file = Dir['/proc/**/cmdline'].find { |cmdline_file| File.read(cmdline_file) =~ /Mirage/ }
    File.read("#{File.dirname(mirage_cmdline_file)}/stat").split(' ').first.to_i
  end

  puts "Stoping Mirage"
  begin
    Process.kill(9, mirage_process_id)
  rescue
    puts 'Mirage is not running'
  end
else
  puts "You must choose to: Start or Stop the mirage"
  exit 1

end
